
# Project Documentation: LostAndFound Application

## Overview

This project is a simple blogging application built using the Laravel framework, allowing users to register, log in, create, and manage blog posts.
The application adheres to the Model-View-Controller (MVC) architecture, emphasizing clean code and separation of concerns. It features user authentication, CRUD operations for posts, and a user-friendly interface.

### Features

- **User Authentication**: Users can register, log in, and log out.
- **Post Management**: Users can create, read, update, and delete their posts.
- **User Dashboard**: A personalized dashboard for users to view their posts.
- **Responsive Design**: The application is responsive and works on various devices.

### Technologies Used

- **Laravel**: PHP framework for building robust web applications.
- **MySQL**: Relational database for data storage.
- **Blade**: Templating engine for rendering HTML views.
- **Bootstrap**: Frontend framework for responsive design.

## Project Structure

```plaintext
/app
    /Http
        /Controllers
            AuthController.php
            PostController.php
    /Models
        Post.php
        User.php
    /Database
        /Factories
            PostFactory.php
            UserFactory.php
        /Migrations
            2024_XX_XX_create_users_table.php
            2024_XX_XX_create_posts_table.php
            2024_XX_XX_create_password_reset_tokens_table.php
            2024_XX_XX_create_sessions_table.php
/resources
    /views
        dashboard.blade.php
        my-post.blade.php
        post-overview.blade.php
/routes
    web.php
```

## Models

### User Model

- **Namespace**: `App\Models`
- **Purpose**: Represents the user in the application and contains user-related data.

**Relationships**:
- `hasMany(Post::class)`: A user can have multiple posts.

**Attributes**:
- `id`: Primary key (auto-increment).
- `name`: User's name (string).
- `email`: User's email (string, unique).
- `password`: User's password (string, hashed).
- `email_verified_at`: Timestamp indicating email verification (nullable).
- `remember_token`: Token for "remember me" functionality (string, nullable).
- `created_at`: Timestamp for record creation.
- `updated_at`: Timestamp for last record update.

### Post Model

- **Namespace**: `App\Models`
- **Purpose**: Represents a blog post and contains post-related data.

**Relationships**:
- `belongsTo(User::class)`: Each post is associated with a user.

**Attributes**:
- `id`: Primary key (auto-increment).
- `user_id`: Foreign key linking to the User model (integer).
- `Title`: Title of the post (string).
- `Body`: Content of the post (text).
- `created_at`: Timestamp for record creation.
- `updated_at`: Timestamp for last record update.

## Migrations

### Create Users Table

This migration creates the `users` table in the database, defining the schema for user-related data.

```php
public function up(): void
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('name');
        $table->string('email')->unique();
        $table->timestamp('email_verified_at')->nullable();
        $table->string('password');
        $table->rememberToken();
        $table->timestamps();
    });
}
```

### Create Posts Table

This migration creates the `posts` table, defining the schema for blog posts.

```php
public function up(): void
{
    Schema::create('posts', function (Blueprint $table) {
        $table->id();
        $table->foreignId("user_id")->constrained()->cascadeOnDelete();
        $table->string("Title");
        $table->text("Body");
        $table->timestamps();
    });
}
```

### Create Password Reset Tokens Table

This migration creates a table for storing password reset tokens, facilitating password recovery.

```php
public function up(): void
{
    Schema::create('password_reset_tokens', function (Blueprint $table) {
        $table->string('email')->primary();
        $table->string('token');
        $table->timestamp('created_at')->nullable();
    });
}
```

### Create Sessions Table

This migration creates a sessions table to manage user sessions.

```php
public function up(): void
{
    Schema::create('sessions', function (Blueprint $table) {
        $table->string('id')->primary();
        $table->foreignId('user_id')->nullable()->index();
        $table->string('ip_address', 45)->nullable();
        $table->text('user_agent')->nullable();
        $table->longText('payload');
        $table->integer('last_activity')->index();
    });
}
```

## Factories

### UserFactory

- **Namespace**: `Database\Factories`

This factory is used to generate fake data for the `User` model during testing.

**Default State**:
```php
public function definition(): array
{
    return [
        'name' => fake()->name(),
        'email' => fake()->unique()->safeEmail(),
        'email_verified_at' => now(),
        'password' => static::$password ??= Hash::make('password'),
        'remember_token' => Str::random(10),
    ];
}
```

### PostFactory

- **Namespace**: `Database\Factories`

This factory is used to generate fake data for the `Post` model during testing.

**Default State**:
```php
public function definition(): array
{
    return [
        "user_id" => 1,
        "Title" => fake()->jobTitle(),
        "Body" => fake()->paragraph(4),
    ];
}
```

## Controllers

### AuthController

- **Namespace**: `App\Http\Controllers`

This controller handles user authentication.

**Methods**:
- `register(Request $request)`: Validates input data and creates a new user, logging them in and redirecting to the post page.
- `login(Request $request)`: Validates user credentials and attempts to log in, redirecting to the dashboard on success.
- `logout(Request $request)`: Logs out the authenticated user and redirects to the login page.

### PostController

- **Namespace**: `App\Http\Controllers`

This controller manages CRUD operations for posts.

**Methods**:
- `index()`: Displays a list of all posts, accessible to all users.
- `myPosts()`: Displays posts created by the authenticated user, providing a personalized experience.
- `store(Request $request)`: Validates and creates a new post for the authenticated user, saving it to the database.
- `show(Post $post)`: Displays detailed information about a specific post.
- `destroy(Post $post)`: Deletes a specific post, ensuring that only the owner can delete their content.

## Views

### dashboard.blade.php

- **Purpose**: Displays the list of all posts with options to view, edit, or delete.

### my-post.blade.php

- **Purpose**: Displays posts created by the authenticated user, allowing them to manage their content.

### post-overview.blade.php

- **Purpose**: Displays detailed information about a specific post, including its title, body, and author.

## Routes

Define the necessary routes in the `web.php` file to link controllers to views. Use route groups to manage middleware for authentication.

```php
use App\Http\Controllers\AuthController;
use App\Http\Controllers\PostController;

Route::get('/register', [AuthController::class, 'register'])->name('register');
Route::post('/login', [AuthController::class, 'login'])->name('login');
Route::post('/logout', [AuthController::class, 'logout'])->name('logout');

// Protected routes for post management
Route::middleware(['auth'])->group(function () {
    Route::resource('post', PostController::class);
});
```

## API Endpoints (Optional)

If your application requires an API, you can define API routes in `api.php`. Here's an example of how to structure your API endpoints:

```php
use App\Http\Controllers\Api\AuthController as ApiAuthController;
use App\Http\Controllers\Api\PostController as ApiPostController;

// API routes for user authentication
Route::post('/api/register', [ApiAuthController::class, 'register']);
Route::post('/api/login', [ApiAuthController::class, 'login']);

// API routes for posts
Route::middleware('auth:api')->group(function () {
    Route::get('/api/posts', [ApiPostController::class, 'index']);
    Route::post('/api/posts', [ApiPostController::class, 'store']);
    Route::get('/api/posts/{post}', [ApiPostController::class, 'show']);
    Route::put('/api/posts/{post}', [ApiPostController::class, 'update']);
    Route::delete('/api/posts/{post}', [ApiPostController::class, 'destroy']);
});
```

## Error Handling

Implement proper error handling for user actions. Utilize Laravelâ€™s built-in validation to handle invalid input and provide user-friendly error messages. For example, in the
`AuthController` and `PostController`, ensure to handle validation exceptions and return appropriate responses.

### Example of Validation Handling

```php
public function register(Request $request)
{
    $request->validate([
        'name' => 'required|string|max:255',
        'email'

 => 'required|string|email|max:255|unique:users',
        'password' => 'required|string|min:8|confirmed',
    ]);

    // Registration logic...
}
```

## User Experience Considerations

- **Responsive Design**: Ensure the application is responsive and accessible on different screen sizes using Bootstrap.
- **User Feedback**: Provide notifications for successful actions (e.g., post creation, deletion) using flash messages or SweetAlert.
- **Accessibility**: Consider accessibility best practices, including semantic HTML and ARIA roles.


